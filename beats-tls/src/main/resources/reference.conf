#
# The configuration for the OPC-UA Beat
#
opcua {
  #
  # The HTTP binding for the OPC-UA beat; this configuration must
  # be adapted to the current environment
  #
  binding = {
    host = "127.0.0.1"
    port = 9090
  }
  addressCache = {
    maximumSize        = 1000
    expireAfterSeconds = 60
  }
  #
  # Meta information to create a self signed certificate;
  # this information must be provided, if no keystore exists
  #
  certificateInfo = {
    organization       = ""
    organizationalUnit = ""
    localityName       = ""
    countryCode        = ""
    dnsName            = ""
    ipAddress          = ""
  }
  keyStore = {
    certAlias       = "cert"
    fileName        = "works-opcua.pfx"
    keyStoreType    = "PKCS12"
    privateKeyAlias = "private-key"
  }
  #
  # Monitoring
  #
  monitoring = {
    bufferSize        = 100
    dataChangeTrigger = "StatusValueTimestamp"
    discardOldest     = false
    samplingInterval  = 0.0
  }
  receiver = {
    id = "works"

    endpointUrl = ""
    updateEndpointUrl = false

    connectTimeout = 5000
    requestTimeout = 5000

    keepAliveFailuresAllowed = 0
    subscriptionSamplingInterval = 0.0
    #
    # The number of threads used by the OpcUaReceiver
    #
    numThreads = 1

  }
  #
  # The (local) directory that contains security specific
  # information like certificates
  #
  securityDir  = "/Work/opc-ua/security"
  #
  # The security policies supported by Eclipse Milo
  #
  # - None
  # - Basic128Rsa15
  # - Basic256
  # - Basic256Sha256
  # - Aes128_Sha256_RsaOaep
  # - Aes256_Sha256_RsaPss
  #
  securityPolicy = "None"

  subscribeOnStartup = [
    "node/ns=2;s=ExampleDP_Float.ExampleDP_Arg1",
    "node/ns=2;s=ExampleDP_Text.ExampleDP_Text1",
    "path/Objects/Test/+/+",
  ]
  #
  # The user credentials to authenticate the
  # current user
  #
  userCredentials = {
    userName = ""
    userPass = ""
  }
  #
  # The security configuration for SSL/TLS
  # the Akka-based Http(s) server of this
  # OPC-UA Beat
  #
  security = {
    #
    # The default configuration for subscription
    # requests does not support SSL/TLS. Set this
    # value to "true" to enable encryption
    #
    ssl = "false"
    #
    # The path to the keystore file
    #
    ksFile = ""
    #
    # The keystore type
    #
    ksType = ""
    #
    # The keystore password
    #
    ksPass = ""
    #
    # The keystore algorithm
    #
    ksAlgo = ""
    #
    # The path to the truststore file
    #
    tsFile = ""
    #
    # The truststore type
    #
    tsType = ""
    #
    # The truststore password
    #
    tsPass = ""
    #
    # The truststore algorithm
    #
    tsAlgo = ""
    #
    # The path to the certificate file of the
    # Certificate authority
    #
    caCertFile = ""
    #
    # The path to the certificate file
    #
    certFile = ""
    #
    # The path to the private key file
    #
    privateKeyFile = ""
    #
    # The password for the private key file
    #
    privateKeyFilePass = ""
  }
}
#
# Works Beats offers multiple output channels. The current implementation
# supports MQTT and SSE publishing. The MQTT output channel distinguishes
# between Eclipse Paho for Mqtt v3.1 & v3.1.1, and, HiveMQ for Mqtt v3.1.1
# and Mqtt v5.
#
output {
  #
  # The output channel used by Works Beats. Either `mqtt` or `sse` is
  # accepted. The default channel is `sse`.
  #
  channel = "sse"
  #
  # The configuration of the MQTT output channel
  #
  mqtt = {
    #
    # The configuration of the MQTT client to use for
    # connecting to an MQTT broker; values are `hive`
    # and `paho`.
    #
    client = "paho"
    #
    # Configuration of the HiveMQ client
    #
    hive = {
      # The host of the HiveMQ broker
      mqttHost = ""
      # The port of the HiveMQ broker
      mqttPort = 0
      # The name of a registered user of the HiveMQ broker.
      # This parameter is optional. Without providing a user
      # name, no authentication is executed.
      mqttUser = ""
      # The password of the registered user
      mqttPass = ""
      #
      # The quality of service
      #
      # 0: QoS for at most once delivery according to the
      #    capabilities of the underlying network.
      #
      #    AT_MOST_ONCE
      #
      # 1: QoS for ensuring at least once delivery.
      #
      #    AT_LEAST_ONCE
      #
      # 2: QoS for ensuring exactly once delivery.
      #
      #    EXACTLY_ONCE
      #
      mqttQoS = 1
      #
      # The version of the Mqtt protocol: Either MQTT v3.1.1 (3) or v5 (5)
      #
      mqttVersion = 3
      #
      # SSL/TLS support to publish messages to the HiveMQ broker
      #
      mqttSsl = {
        #
        # The default configuration for subscription
        # requests does not support SSL/TLS. Set this
        # value to "true" to enable encryption
        #
        ssl = "false"
        #
        # The path to the keystore file
        #
        ksFile = ""
        #
        # The keystore type
        #
        ksType = ""
        #
        # The keystore password
        #
        ksPass = ""
        #
        # The keystore algorithm
        #
        ksAlgo = ""
        #
        # The path to the truststore file
        #
        tsFile = ""
        #
        # The truststore type
        #
        tsType = ""
        #
        # The truststore password
        #
        tsPass = ""
        #
        # The truststore algorithm
        #
        tsAlgo = ""
        #
        # The path to the certificate file of the
        # Certificate authority
        #
        caCertFile = ""
        #
        # The path to the certificate file
        #
        certFile = ""
        #
        # The path to the private key file
        #
        privateKeyFile = ""
        #
        # The password for the private key file
        #
        privateKeyFilePass = ""
      }
    }
    #
    # Configuration of the Paho Client
    #
    paho = {
      # The url of the Mosquitto broker
      mqttUrl = ""
      #
      # The unique client identifier used to connect to
      # the Mosquitto server
      #
      clientId = ""
      # The name of a registered user of the Mosquitto broker.
      # This parameter is optional. Without providing a user
      # name, no authentication is executed.
      mqttUser = ""
      # The password of the registered user
      mqttPass = ""
      #
      # The quality of service
      #
      # 0: QoS for at most once delivery according to the
      #    capabilities of the underlying network.
      #
      #    AT_MOST_ONCE
      #
      # 1: QoS for ensuring at least once delivery.
      #
      #    AT_LEAST_ONCE
      #
      # 2: QoS for ensuring exactly once delivery.
      #
      #    EXACTLY_ONCE
      #
      mqttQoS = 1
      #
      # The version of the MQTT protocol: Either MQTT v3.1 (3) or v3.1.1 (4)
      #
      mqttVersion = 4
      #
      # Keep alive interval for the Mqtt connection.
      #
      keepAlive = 120
      #
      # The connection timeout for the Mqtt connection
      #
      timeout = 120
      #
      # SSL/TLS support to publish messages to the Mosquitto broker
      #
      mqttSsl = {
        #
        # The default configuration for subscription
        # requests does not support SSL/TLS. Set this
        # value to "true" to enable encryption
        #
        ssl = "false"
        #
        # The path to the keystore file
        #
        ksFile = ""
        #
        # The keystore type
        #
        ksType = ""
        #
        # The keystore password
        #
        ksPass = ""
        #
        # The keystore algorithm
        #
        ksAlgo = ""
        #
        # The path to the truststore file
        #
        tsFile = ""
        #
        # The truststore type
        #
        tsType = ""
        #
        # The truststore password
        #
        tsPass = ""
        #
        # The truststore algorithm
        #
        tsAlgo = ""
        #
        # The path to the certificate file of the
        # Certificate authority
        #
        caCertFile = ""
        #
        # The path to the certificate file
        #
        certFile = ""
        #
        # The path to the private key file
        #
        privateKeyFile = ""
        #
        # The password for the private key file
        #
        privateKeyFilePass = ""
      }
    }
  }
}